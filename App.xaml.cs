using Hardcodet.Wpf.TaskbarNotification;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using HtmlAgilityPack;
using Newtonsoft.Json;
using System.Net.Http.Headers;
using System.Runtime.InteropServices;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using System.Text.RegularExpressions;
using System.Windows.Media;

namespace LoL_Generator
{
    /// <summary>
    /// Main class for the primary logic of this program (e.g. client polling, loadout generation).
    /// </summary>
    public partial class App : Application
    {
        /// <value>Used to keep an instance of the notification tray icon.</value>
        public static TaskbarIcon notifyIcon;
        /// <value>Used to keep an instance of the window of the program.</value>
        public static MainWindow window;

        /// <value>Stores the lock file location that contains session credentials.</value>
        static string lockfileloc;

        /// <value>Stores the port number of the local server.</value>
        public static string port;
        /// <value>Stores the password to login to the local server.</value>
        static string password;
        /// <value>Stores the byte encoding of the username and password of the local server.</value>
        static byte[] encoding;

        /// <value>Stores the summoner id of the current user.</value>
        public static long summonerId;

        /// <value>Denotes whether the program has retrieved the current user's rune pages/item sets for the current champion selection.</value>
        static bool listedSets;
        /// <value>Stores the name of the current champion selected.</value>
        public static string champion;
        /// <value>Denotes whether the program has automatically generated a loadout for the current champion selection.</value>
        static bool autoGenerated;
        /// <value>Stores what the last champion and role a loadout was generated for the current champion selection.</value>
        public static string generatedFor;

        /// <value>Stores the id of the current champion selected.</value>
        static int championHoverId;
        /// <value>Stores the selected role of the current champion selected.</value>
        public static string currole;

        /// <value>Stores the client that will send REST API requests.</value>
        static HttpClient httpClient;
        /// <value>Sets up the client.</value>
        static HttpClientHandler handler;

        /// <value>Used to cancel tasks.</value>
        static CancellationTokenSource tokenSource;

        /// <summary>
        /// Runs on program startup and starts the basic parts of program.
        /// </summary>
        /// <param name="e">The event arguments that will be passed to the Startup event</param>
        protected override void OnStartup(StartupEventArgs e)
        {
            //Create an instance of the main window and send it to the notification tray.
            window = new MainWindow();
            window.Hide();

            //Create the notification tray icon.
            notifyIcon = (TaskbarIcon)FindResource("MyNotifyIcon");

            //Start the background task to poll for the League client.
            tokenSource = new CancellationTokenSource();
            StartNewTask(InitiatePolling, TimeSpan.FromSeconds(3), tokenSource.Token);

            base.OnStartup(e);
        }

        /// <summary>
        /// Runs on program exit and handles storing and cleanup.
        /// </summary>
        /// <param name="e">The event arguments that will be passed to the Exit event</param>
        protected override void OnExit(ExitEventArgs e)
        {
            //Save the dynamic properities of the program.
            LoL_Generator.Properties.Settings.Default.Save();

            //Deletes the notification tray icon from the notification tray.
            notifyIcon.Dispose();

            base.OnExit(e);
        }

        /// <summary>
        /// Checks if league client is open and handles it if it is not.
        /// </summary>
        /// <returns>
        /// Whether or not the client is open.
        /// </returns>
        bool CheckClientIsOpen()
        {
            //If there is not a running process called "LeagueClient".
            if (Process.GetProcessesByName("LeagueClient").FirstOrDefault() == null)
            {
                //Cancel the current task.
                tokenSource.Cancel();

                Action act = () =>
                {
                    //Change the active indicator to "Offline".
                    window.OnlineInd.Visibility = Visibility.Hidden;
                    window.OfflineInd.Visibility = Visibility.Visible;

                    //Indicate that the client is not opened and hide the loading icon.
                    window.LoadingText.Text = "Client Not Opened";
                    window.LoadingIcon.Visibility = Visibility.Hidden;

                    //If the champion interface overlay is visible, hide the overlay and display the waiting overlay.
                    if (window.SettingsOverlay.Visibility == Visibility.Hidden && window.ChampionOverlay.Visibility == Visibility.Visible)
                    {
                        window.ChampionOverlay.Visibility = Visibility.Hidden;
                        window.WaitingOverlay.Visibility = Visibility.Visible;
                    }
                };
                window.Dispatcher.Invoke(act);

                //Reset appropriate variables to default to prepare for next session.
                summonerId = default;
                listedSets = false;
                champion = default;
                autoGenerated = false;
                generatedFor = default;
                championHoverId = default;
                currole = default;

                //Start the background task to poll for the league client.
                tokenSource = new CancellationTokenSource();
                StartNewTask(InitiatePolling, TimeSpan.FromSeconds(3), tokenSource.Token);

                return false;
            }

            return true;
        }

        /// <summary>
        /// Gets the lockfile file pathway once the client has been opened.
        /// </summary>
        void InitiatePolling()
        {
            //If there is a running process called "LeagueClient".
            if (Process.GetProcessesByName("LeagueClient").FirstOrDefault() != null)
            {
                //Cancel the current task.
                tokenSource.Cancel();

                //Get the location of the lockfile which will be located in the same directory as the client.
                string clientpath = Path.GetDirectoryName(GetProcessFilename(Process.GetProcessesByName("LeagueClient").FirstOrDefault()));
                lockfileloc = clientpath + @"\lockfile";

                //Start the background task to poll for the lockfile.
                tokenSource = new CancellationTokenSource();
                StartNewTask(CheckLockFileExists, TimeSpan.FromSeconds(0.5), tokenSource.Token);
            }
        }

        /// <summary>
        /// Extracts credentials from the lockfile and sets up the http client
        /// </summary>
        void CheckLockFileExists()
        {
            //If the client is still opened.
            if (CheckClientIsOpen())
            {
                //If the lockfile has been generated.
                if (File.Exists(lockfileloc))
                {
                    //Cancel the current task.
                    tokenSource.Cancel();

                    Action act = () =>
                    {
                        //Change the active indicator to "Online".
                        window.OfflineInd.Visibility = Visibility.Hidden;
                        window.OnlineInd.Visibility = Visibility.Visible;

                        //Indicate that champion select is waiting to start and show the loading icon.
                        window.LoadingText.Text = "Waiting For A Champion Select To Start";
                        window.LoadingIcon.Visibility = Visibility.Visible;
                    };
                    window.Dispatcher.Invoke(act);

                    //Open and read the lockfile byte by byte since the lockfile is not a traditional text file.
                    string lockfile = "";
                    using (FileStream fs = File.Open(lockfileloc, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                    {
                        byte[] buf = new byte[1024];
                        int c;

                        while ((c = fs.Read(buf, 0, buf.Length)) > 0)
                        {
                            lockfile = Encoding.UTF8.GetString(buf, 0, c);
                        }
                    }

                    //Parse the lockfile and retrieve the port and password separated by :.
                    port = lockfile.Split(':')[2];
                    password = lockfile.Split(':')[3];
                    //Encode username and password in bytes for REST API requests.
                    encoding = Encoding.ASCII.GetBytes($"riot:{password}");

                    //Setup the http client for REST API requests..
                    handler = new HttpClientHandler();
                    handler.ServerCertificateCustomValidationCallback = (requestMessage, certificate, chain, policyErrors) => true;
                    httpClient = new HttpClient(handler);

                    //Start the background task to poll for champion select.
                    tokenSource = new CancellationTokenSource();
                    StartNewTask(CheckInChampSelect, TimeSpan.FromSeconds(0.5), tokenSource.Token);
                }
            }
        }

        /// <summary>
        /// The core part of the program that handles champion selection logic.
        /// </summary>
        async void CheckInChampSelect()
        {
            //If the client is still opened.
            if (CheckClientIsOpen())
            {
                try
                {
                    //If the summoner id has not been set, this means this is a new session for the current user.
                    if (summonerId == default)
                    {
                        //Get the summoner id of the logged in player.
                        string summonerJson = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-summoner/v1/current-summoner", null);
                        //Convert string to an a SummonerInfo object.
                        SummonerInfo summonerJsonObject = JsonConvert.DeserializeObject<SummonerInfo>(summonerJson);

                        summonerId = summonerJsonObject.summonerId;

                        foreach (string id in LoL_Generator.Properties.Settings.Default.defRunePageIDs)
                        {
                            if (id.Contains(summonerId.ToString()))
                            {
                                window.Dispatcher.Invoke(new Action(() => window.DefaultRunePage.Tag = int.Parse(id.Split(' ')[1])));
                            }
                        }
                        foreach (string id in LoL_Generator.Properties.Settings.Default.defItemSetIDs)
                        {
                            if (id.Contains(summonerId.ToString()))
                            {
                                window.Dispatcher.Invoke(new Action(() => window.DefaultItemPage.Tag = id.Split(' ')[1]));
                            }
                        }
                    }

                    //get the game state to check if champion select has started
                    string gamephase = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-gameflow/v1/gameflow-phase", null);

                    if (gamephase == "\"ChampSelect\"")
                    {
                        Action message = () =>
                        {
                            if (!autoGenerated && window.LoadingText.Text != "Waiting For A Champion To Be Picked" && window.LoadingText.Text != "Loading Champion Interface")
                            {
                                window.LoadingText.Text = "Waiting For A Champion To Be Picked";
                            }
                        };
                        window.Dispatcher.Invoke(message);

                        if (!listedSets && LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox)
                        {
                            Action act = () =>
                            {
                                window.EnableInterfaceCheckBox.IsEnabled = false;

                                if (LoL_Generator.Properties.Settings.Default.ReanableCheckBox && !LoL_Generator.Properties.Settings.Default.EnableCheckBox)
                                {
                                    window.EnableCheckBox.IsChecked = true;
                                }
                            };
                            window.Dispatcher.Invoke(act);

                            //get all rune pages the player has using the RunePageInfo class
                            string runePagesJson = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-perks/v1/pages", null);
                            List<RunePageInfo> runePageObject = JsonConvert.DeserializeObject<List<RunePageInfo>>(runePagesJson);

                            //get all item sets the player has the ItemSets class
                            string itemPagesJson = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-item-sets/v1/item-sets/{summonerId}/sets", null);
                            ItemSets itemPagesObject = JsonConvert.DeserializeObject<ItemSets>(itemPagesJson);

                            act = () => {
                                //retrieve the default rune page item, clear the rune page combobox (aka dropdown menu) of items then restore the default rune page item
                                ComboBoxItem defaultRunePage = (ComboBoxItem)window.RuneMenu.FindName("DefaultRunePage");
                                window.RuneMenu.Items.Clear();
                                window.RuneMenu.Items.Add(defaultRunePage);
                                window.RuneMenu.SelectedItem = defaultRunePage;

                                int defaultID = (defaultRunePage.Tag != default) ? (int)defaultRunePage.Tag : default;
                                //add the names of the rune pages the player has to the combobox and store its id along with it
                                foreach (RunePageInfo runePage in runePageObject)
                                {
                                    if (runePage.isEditable && runePage.id != defaultID)
                                    {
                                        window.RuneMenu.Items.Add(new ComboBoxItem() { Content = runePage.name, Tag = runePage.id });
                                    }
                                }

                                //do the same tasks as above but for item pages
                                ComboBoxItem defaultItemPage = (ComboBoxItem)window.ItemMenu.FindName("DefaultItemPage");
                                window.ItemMenu.Items.Clear();
                                window.ItemMenu.Items.Add(defaultItemPage);
                                window.ItemMenu.SelectedItem = defaultItemPage;

                                string defaultUID = (!string.IsNullOrEmpty((string)defaultItemPage.Tag)) ? (string)defaultItemPage.Tag : default;
                                foreach (ItemSet itemPage in itemPagesObject.itemSets)
                                {
                                    if (itemPage.uid != defaultUID)
                                    {
                                        window.ItemMenu.Items.Add(new ComboBoxItem() { Content = itemPage.title, Tag = itemPage.uid });
                                    }
                                }
                            };
                            window.Dispatcher.Invoke(act);

                            listedSets = true;
                        }
                        else if (!listedSets && !LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox)
                        {
                            Action act = () =>
                            {
                                window.EnableInterfaceCheckBox.IsEnabled = false;

                                if (LoL_Generator.Properties.Settings.Default.ReanableCheckBox && !LoL_Generator.Properties.Settings.Default.EnableCheckBox)
                                {
                                    window.EnableCheckBox.IsChecked = true;
                                }
                            };
                            window.Dispatcher.Invoke(act);

                            act = () =>
                            {
                                ComboBoxItem defaultRunePage = (ComboBoxItem)window.RuneMenu.FindName("DefaultRunePage");
                                window.RuneMenu.Items.Clear();
                                window.RuneMenu.Items.Add(defaultRunePage);
                                window.RuneMenu.SelectedItem = defaultRunePage;

                                ComboBoxItem defaultItemPage = (ComboBoxItem)window.ItemMenu.FindName("DefaultItemPage");
                                window.ItemMenu.Items.Clear();
                                window.ItemMenu.Items.Add(defaultItemPage);
                                window.ItemMenu.SelectedItem = defaultItemPage;
                            };
                            window.Dispatcher.Invoke(act);

                            listedSets = true;
                        }
                        //get the id of the current champion selected using the ChampionHoverInfo class
                        string championHoverJson = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-champ-select/v1/session", null);
                        ChampionHoverInfo championHoverObject = JsonConvert.DeserializeObject<ChampionHoverInfo>(championHoverJson);

                        //select the champion id from searching for the current summoner from their team
                        championHoverId = championHoverObject.myTeam.FirstOrDefault(x => x.summonerId == summonerId).championId;

                        HtmlDocument htmlDoc = default;
                        string championLockId = default;
                        string primaryrole = default;
                        //check if a champion is selected
                        if (championHoverId != 0)
                        {
                            //get the name of the champion from its id using the ChampionInfo class
                            string championJson = await SendRequestAsync("GET", $"http://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/v1/champions/{championHoverId}.json", null);
                            ChampionInfo championJsonObject = JsonConvert.DeserializeObject<ChampionInfo>(championJson);

                            Regex regex = new Regex(@"[^A-Za-z0-9]+");

                            //check if the champion hovered has changed
                            if (champion == default || (championJsonObject.name != "Nunu & Willump" && champion != regex.Replace(championJsonObject.name, "")) || (championJsonObject.name == "Nunu & Willump" && champion != "nunu"))
                            {
                                Action act = () =>
                                {
                                    if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox && window.WaitingOverlay.Visibility == Visibility.Visible)
                                    {
                                        window.LoadingText.Text = "Loading Champion Interface";

                                        window.LoadoutProgress.Maximum += 8;

                                        window.LoadingIcon.Visibility = Visibility.Hidden;
                                        window.LoadoutProgress.Visibility = Visibility.Visible;
                                    }
                                    else if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox && window.ChampionOverlay.Visibility == Visibility.Visible)
                                    {
                                        window.IntLoadingIcon.Visibility = Visibility.Visible;
                                    }
                                };
                                window.Dispatcher.Invoke(act);

                                //assign the champion variable to the current champion
                                champion = regex.Replace(championJsonObject.name, "");

                                if (championJsonObject.name == "Nunu & Willump")
                                {
                                    champion = "nunu";
                                }

                                //load the statistics page from op.gg of the champion selected
                                htmlDoc = new HtmlWeb().Load($"https://na.op.gg/champion/{champion}/statistics/");

                                act = () =>
                                {
                                    if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox && window.WaitingOverlay.Visibility == Visibility.Visible)
                                    {
                                        window.LoadoutProgress.Value += 5;
                                    }
                                };
                                window.Dispatcher.Invoke(act);

                                //XPath query that gets the available roles of the champion
                                string xpath = $"//ul[@class='champion-stats-position']//li";

                                //clear the roles grid of roles
                                window.Dispatcher.Invoke(new Action(() => window.RolesGrid.Children.Clear()));
                                //retrieve the roles from op.gg using the above XPath query
                                HtmlNodeCollection roles = htmlDoc.DocumentNode.SelectNodes(xpath);

                                if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox)
                                {
                                    foreach (HtmlNode node in roles)
                                    {
                                        //retrieve the assigned to the data-position element which contains the name of the role
                                        string role = node.GetAttributeValue("data-position", "nothing").ToLower();

                                        //set the first role as the primary role and the current role
                                        if (roles.IndexOf(node) == 0)
                                        {
                                            primaryrole = role;
                                            currole = role;
                                        }

                                        //add the role as a button to the UI
                                        AddRoleButton(role, roles.IndexOf(node) == 0);
                                    }

                                    act = () =>
                                    {
                                        if (window.WaitingOverlay.Visibility == Visibility.Visible)
                                        {
                                            window.LoadoutProgress.Value += 1;
                                        }
                                    };
                                    window.Dispatcher.Invoke(act);

                                    //add the recommened summoner spells to the UI
                                    DisplaySummoners(htmlDoc);

                                    act = () =>
                                    {
                                        window.ChampionIcon.Source = new BitmapImage(new Uri($@"https://opgg-static.akamaized.net/images/lol/champion/{champion}.png?image=q_auto,w_140&v=1596679559", UriKind.Absolute));

                                        if (window.WaitingOverlay.Visibility == Visibility.Visible)
                                        {
                                            window.LoadoutProgress.Value += 1;
                                        }
                                    };
                                    window.Dispatcher.Invoke(act);

                                    act = () => {
                                        window.IntLoadingIcon.Visibility = Visibility.Hidden;

                                        if (window.SettingsOverlay.Visibility == Visibility.Hidden)
                                        {
                                            if (window.WaitingOverlay.Visibility == Visibility.Visible)
                                            {
                                                window.WaitingOverlay.Visibility = Visibility.Hidden;
                                                window.ChampionOverlay.Visibility = Visibility.Visible;
                                            }

                                            if (LoL_Generator.Properties.Settings.Default.PopUpCheckBox)
                                            {
                                                if (window.Visibility == Visibility.Hidden)
                                                {
                                                    window.Show();
                                                }

                                                if (window.WindowState == WindowState.Minimized)
                                                {
                                                    window.WindowState = WindowState.Normal;
                                                }

                                                window.Activate();
                                                window.Topmost = true;
                                                window.Topmost = false;
                                            } 
                                        }
                                    };
                                    window.Dispatcher.Invoke(act);
                                }
                                else
                                {
                                    currole = roles[0].GetAttributeValue("data-position", "nothing").ToLower();
                                }
                            }

                            //get the id of the locked champion (if a champion was locked)
                            championLockId = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-champ-select/v1/current-champion", null);
                        }

                        if (LoL_Generator.Properties.Settings.Default.EnableCheckBox && !autoGenerated && generatedFor != champion + currole && championLockId != "0" && !string.IsNullOrEmpty(championLockId) && int.TryParse(championLockId, out int i) && champion != default && currole != default)
                        {
                            autoGenerated = true;
                            Action act = () =>
                            {
                                if (!LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox)
                                {
                                    if (LoL_Generator.Properties.Settings.Default.EnableRuneCheckBox)
                                    {
                                        window.LoadoutProgress.Maximum += 10;
                                    }
                                    if (LoL_Generator.Properties.Settings.Default.EnableItemCheckBox)
                                    {
                                        window.LoadoutProgress.Maximum += 9;
                                    }
                                    window.LoadingText.Text = "Generating Loadout";

                                    window.LoadingIcon.Visibility = Visibility.Hidden;
                                    window.LoadoutProgress.Visibility = Visibility.Visible;
                                }
                                else if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox && window.ChampionOverlay.Visibility == Visibility.Visible)
                                {
                                    if (LoL_Generator.Properties.Settings.Default.EnableRuneCheckBox)
                                    {
                                        window.IntLoadoutProgress.Maximum += 10;
                                    }
                                    if (LoL_Generator.Properties.Settings.Default.EnableItemCheckBox)
                                    {
                                        window.IntLoadoutProgress.Maximum += 9;
                                    }

                                    window.IntLoadoutProgress.Visibility = Visibility.Visible;
                                }
                            };
                            await window.Dispatcher.BeginInvoke(act);

                            if (LoL_Generator.Properties.Settings.Default.EnableRuneCheckBox)
                            {
                                await GenerateRunePage(champion, currole);
                            }
                            if (LoL_Generator.Properties.Settings.Default.EnableItemCheckBox)
                            {
                                await GenerateItemPage(champion, currole);
                            }

                            act = () =>
                            {
                                if (!LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox)
                                {
                                    window.LoadingText.Text = "Generated";
                                }
                                else if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox && window.ChampionOverlay.Visibility == Visibility.Visible)
                                {
                                    window.IntLoadoutProgress.Visibility = Visibility.Hidden;

                                    window.IntLoadoutProgress.Value = 0;
                                    window.IntLoadoutProgress.Maximum = 0;
                                }
                            };
                            window.Dispatcher.Invoke(act);
                        }
                    }

                    //display the waiting overlay and reset values if champion select is exitted
                    if (gamephase != "\"ChampSelect\"")
                    {
                        Action act = () =>
                        {
                            if (LoL_Generator.Properties.Settings.Default.CollapseCheckBox)
                            {
                                if (window.Visibility == Visibility.Visible && window.ChampionOverlay.Visibility == Visibility.Visible)
                                {
                                    window.Hide();
                                }
                            }

                            window.EnableInterfaceCheckBox.IsEnabled = true;

                            window.LoadingText.Text = "Waiting For Champion Select To Start";

                            if (window.LoadoutProgress.Visibility == Visibility.Visible)
                            {
                                window.LoadoutProgress.Visibility = Visibility.Hidden;
                                window.LoadoutProgress.Value = 0;
                                window.LoadoutProgress.Maximum = 0;

                                window.LoadingIcon.Visibility = Visibility.Visible;
                            }
                                                        
                            if (window.ChampionOverlay.Visibility == Visibility.Visible)
                            {
                                window.ChampionOverlay.Visibility = Visibility.Hidden;
                                window.WaitingOverlay.Visibility = Visibility.Visible;
                            }
                        };
                        window.Dispatcher.Invoke(act);

                        listedSets = false;
                        champion = default;
                        autoGenerated = false;
                        generatedFor = default;
                        championHoverId = default;
                        currole = default;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }
            }
        }

        //displays summoner spells
        void DisplaySummoners(HtmlDocument htmlDoc)
        {
            //XPath query to get the path image source of each summoner spell
            string xpath = "//table[@class='champion-overview__table champion-overview__table--summonerspell']//img[contains(@src, 'Summoner')]";
            List<string> summonerImages = new List<string>();

            //for each image source, add https: in front of it to make it a link
            foreach (HtmlNode node in htmlDoc.DocumentNode.SelectNodes(xpath))
            {
                summonerImages.Add("https:" + node.GetAttributeValue("src", "nothing"));
            }
            //display each summoner spell as an image retrieved from the links made above
            Action act = () =>
            {
                window.Summoner1Image.Source = new BitmapImage(new Uri(summonerImages[0], UriKind.Absolute));
                window.Summoner2Image.Source = new BitmapImage(new Uri(summonerImages[1], UriKind.Absolute));
                window.Summoner3Image.Source = new BitmapImage(new Uri(summonerImages[2], UriKind.Absolute));
                window.Summoner4Image.Source = new BitmapImage(new Uri(summonerImages[3], UriKind.Absolute));

                if (window.WaitingOverlay.Visibility == Visibility.Visible)
                {
                    window.LoadoutProgress.Value += 1;
                }
            };
            window.Dispatcher.Invoke(act);
        }

        //handles when the user selects a different role
        void SelectRole(object sender, RoutedEventArgs e)
        {
            //get the current button selected
            Button currbutton = sender as Button;

            foreach (UIElement children in window.RolesGrid.Children)
            {
                //get the image associated with each button
                Button button = children as Button;
                Image image = button.Content as Image;

                //"dim" the other images and "brighten" the current selected one
                if (button != currbutton)
                {
                    window.Dispatcher.Invoke(new Action(() => image.Opacity = 0.25));
                }
                else
                {
                    window.Dispatcher.Invoke(new Action(() => image.Opacity = 1));
                    currole = button.Name;
                }
            }

            //display the new summoner spells associated with the new role selected
            DisplaySummoners(new HtmlWeb().Load($"https://na.op.gg/champion/{champion}/statistics/{currbutton.Name}"));
        }

        //adds a role button to the UI
        void AddRoleButton(string role, bool primary)
        {
            //create a new button for the new role
            Current.Dispatcher.Invoke(delegate
            {
                string image = Utility.imagePaths[role];
                               
                Button newBtn = new Button()
                {
                    Name = role,
                    Content = new Image
                    {
                        Source = new BitmapImage(new Uri(image)),
                        //"brighten" image if this is the primary role
                        Opacity = (primary) ? 1 : 0.25
                    },
                    Height = 30,
                    Width = 30,
                    Background = Brushes.Transparent,
                    BorderBrush = Brushes.Transparent,
                    BorderThickness = new Thickness(1),
                    Padding = new Thickness(-4)
                };
                newBtn.Click += new RoutedEventHandler(SelectRole);

                //add the new button to the roles grid
                window.RolesGrid.Children.Add(newBtn);
            });
        }

        //creates a rune page according to the champion and role
        public static async Task GenerateRunePage(string champion, string role)
        {
            //create and aggregate a new rune page object
            RunePage runePage = new RunePage(champion, role);

            Action act = () =>
            {
                //check if the current rune page selected in the combobox is the default one
                if ((string)((ComboBoxItem)window.RuneMenu.SelectedItem).Content != "Default")
                {
                    //update the name of the rune page if it is not
                    ((ComboBoxItem)window.RuneMenu.SelectedItem).Content = runePage.name;
                }
                else
                {
                    //specify in the name that it is default if it is
                    runePage.name += " (Default)";
                }
            };
            window.Dispatcher.Invoke(act);

            //convert the rune page object into a json file
            string runeJson = JsonConvert.SerializeObject(runePage);

            int id = default;
            act = () =>
            {
                if (((ComboBoxItem)window.RuneMenu.SelectedItem).Tag != default)
                {
                    id = (int)((ComboBoxItem)window.RuneMenu.SelectedItem).Tag;
                }
            };
            window.Dispatcher.Invoke(act);

            ResponseBody responseBody = default;
            if (id != default)
            {
                //if the id has been assigned try to send a put request to update the rune page
                string responseBodyJson = await SendRequestAsync("PUT", $"https://127.0.0.1:{port}/lol-perks/v1/pages/{id}", runeJson);
                responseBody = JsonConvert.DeserializeObject<ResponseBody>(responseBodyJson);
            }
            if (id == default || (responseBody != default && responseBody.httpStatus == 404))
            {
                //send a post request to upload the new rune page
                string responseBodyJson = await SendRequestAsync("POST", $"https://127.0.0.1:{port}/lol-perks/v1/pages/", runeJson);
                responseBody = JsonConvert.DeserializeObject<ResponseBody>(responseBodyJson);

                act = () =>
                {
                    if (!LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox)
                    {
                        window.LoadoutProgress.Value += 5;
                    }
                    else if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox && window.ChampionOverlay.Visibility == Visibility.Visible)
                    {
                        window.IntLoadoutProgress.Value += 5;
                    }
                };
                window.Dispatcher.Invoke(act);

                if (responseBody.httpStatus != 400)
                {
                    //get the id of the uploaded rune page using the RunePageInfo class
                    string currentRunePageJson = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-perks/v1/currentpage", null);
                    RunePageInfo currentRunePageObject = JsonConvert.DeserializeObject<RunePageInfo>(currentRunePageJson);

                    act = () =>
                    {
                        ((ComboBoxItem)window.RuneMenu.SelectedItem).Tag = currentRunePageObject.id;

                        if ((string)((ComboBoxItem)window.RuneMenu.SelectedItem).Content == "Default")
                        {
                            if (LoL_Generator.Properties.Settings.Default.defRunePageIDs == default)
                            {
                                LoL_Generator.Properties.Settings.Default.defRunePageIDs = new System.Collections.Specialized.StringCollection();
                            }
                            for (int i = 0; i < LoL_Generator.Properties.Settings.Default.defRunePageIDs.Count; i++)
                            {
                                if (LoL_Generator.Properties.Settings.Default.defRunePageIDs[i].Contains(summonerId.ToString()))
                                {
                                    LoL_Generator.Properties.Settings.Default.defRunePageIDs[i] = summonerId + " " + currentRunePageObject.id;
                                    return;
                                }
                            }

                            LoL_Generator.Properties.Settings.Default.defRunePageIDs.Add(summonerId + " " + currentRunePageObject.id);
                        }
                    };
                    window.Dispatcher.Invoke(act);
                }
            }
            else
            {
                act = () =>
                {
                    if (!LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox)
                    {
                        window.LoadoutProgress.Value += 5;
                    }
                    else if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox && window.ChampionOverlay.Visibility == Visibility.Visible)
                    {
                        window.IntLoadoutProgress.Value += 5;
                    }
                };
                window.Dispatcher.Invoke(act);
            }
        }

        public static async Task GenerateItemPage(string champion, string role)
        {
            ItemSet itemSet = new ItemSet(champion, role, championHoverId);

            Action act = () =>
            {
                if ((string)((ComboBoxItem)window.ItemMenu.SelectedItem).Content != "Default")
                {
                    ((ComboBoxItem)window.ItemMenu.SelectedItem).Content = itemSet.title;
                }
                else
                {
                    itemSet.title += " (Default)";
                }
            };
            window.Dispatcher.Invoke(act);

            string itemPagesJson = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-item-sets/v1/item-sets/{summonerId}/sets", null);
            ItemSets itemPagesObject = JsonConvert.DeserializeObject<ItemSets>(itemPagesJson);

            string uid = default;
            act = () =>
            {
                if (!string.IsNullOrEmpty((string)((ComboBoxItem)window.ItemMenu.SelectedItem).Tag))
                {
                    uid = (string)((ComboBoxItem)window.ItemMenu.SelectedItem).Tag;
                }
            };
            window.Dispatcher.Invoke(act);
                        
            int exisitingIndex = default;
            if (uid != default)
            {
                exisitingIndex = itemPagesObject.itemSets.FindIndex(x => x.uid == uid);

                if (exisitingIndex != -1)
                {
                    itemPagesObject.itemSets[exisitingIndex] = itemSet;
                }
            }
            if (uid == default || exisitingIndex == -1)
            {
                itemPagesObject.itemSets.Add(itemSet);
            }

            string itemsetsJson = JsonConvert.SerializeObject(itemPagesObject);

            await SendRequestAsync("PUT", $"https://127.0.0.1:{port}/lol-item-sets/v1/item-sets/{summonerId}/sets", itemsetsJson);

            act = () =>
            {
                if (!LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox)
                {
                    window.LoadoutProgress.Value += 5;
                }
                else if (LoL_Generator.Properties.Settings.Default.EnableInterfaceCheckBox && window.ChampionOverlay.Visibility == Visibility.Visible)
                {
                    window.IntLoadoutProgress.Value += 5;
                }
            };
            window.Dispatcher.Invoke(act);

            itemPagesJson = await SendRequestAsync("GET", $"https://127.0.0.1:{port}/lol-item-sets/v1/item-sets/{summonerId}/sets", null);
            itemPagesObject = JsonConvert.DeserializeObject<ItemSets>(itemPagesJson);

            int index = (uid == default || exisitingIndex == -1) ? itemPagesObject.itemSets.Count - 1 : exisitingIndex;
            string newuid = itemPagesObject.itemSets[index].uid;

            act = () =>
            {
                ((ComboBoxItem)window.ItemMenu.SelectedItem).Tag = newuid;

                if (uid == default || (string)((ComboBoxItem)window.ItemMenu.SelectedItem).Content == "Default")
                {
                    if (LoL_Generator.Properties.Settings.Default.defItemSetIDs == default)
                    {
                        LoL_Generator.Properties.Settings.Default.defItemSetIDs = new System.Collections.Specialized.StringCollection();
                    }
                    for (int i = 0; i < LoL_Generator.Properties.Settings.Default.defItemSetIDs.Count; i++)
                    {
                        if (LoL_Generator.Properties.Settings.Default.defItemSetIDs[i].Contains(summonerId.ToString()))
                        {
                            LoL_Generator.Properties.Settings.Default.defItemSetIDs[i] = summonerId + " " + newuid;
                            return;
                        }
                    }

                    LoL_Generator.Properties.Settings.Default.defItemSetIDs.Add(summonerId + " " + newuid);
                }
            };
            window.Dispatcher.Invoke(act);
        }
        
        //sends REST API requests and returns data if applicable
        public static async Task<string> SendRequestAsync(string method, string url, string json)
        {
            //initiate the new request using the method and url parameters
            using (HttpRequestMessage request = new HttpRequestMessage(new HttpMethod(method), url))
            {
                //specify we want to request json data
                request.Headers.TryAddWithoutValidation("Accept", "application/json");
                //specify authorization details
                request.Headers.TryAddWithoutValidation("Authorization", "Basic " + Convert.ToBase64String(encoding));

                //specifiy json data to be uploaded if the method is a POST or PUT request
                if ((method == "POST" || method == "PUT") && json != null)
                {
                    request.Content = new StringContent(json);
                    request.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                }

                //send the request
                HttpResponseMessage response = await httpClient.SendAsync(request);

                return await response.Content.ReadAsStringAsync();
            }
        }

        //starts a new background task primarily using the function to be looped and the time interval
        //code retrieved from: https://stackoverflow.com/questions/7472013/how-to-create-a-thread-task-with-a-continuous-loop/35308832
        static async void StartNewTask(Action action, TimeSpan pollInterval, CancellationToken token, TaskCreationOptions taskCreationOptions = TaskCreationOptions.None)
        {
            await Task.Factory.StartNew(
                () =>
                {
                    do
                    {
                        try
                        {
                            action();
                            if (token.WaitHandle.WaitOne(pollInterval)) break;
                        }
                        catch
                        {
                            return;
                        }
                    }
                    while (true);
                },
                token,
                taskCreationOptions,
                TaskScheduler.Default);
        }

        //functions to help retrieve the file names of running processes without needing elevated rights
        //code retrieved from: https://stackoverflow.com/questions/8431298/process-mainmodule-access-is-denied
        [Flags]
        private enum ProcessAccessFlags : uint
        {
            QueryLimitedInformation = 0x00001000
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool QueryFullProcessImageName(
              [In] IntPtr hProcess,
              [In] int dwFlags,
              [Out] StringBuilder lpExeName,
              ref int lpdwSize);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern IntPtr OpenProcess(
         ProcessAccessFlags processAccess,
         bool bInheritHandle,
         int processId);

        static string GetProcessFilename(Process p)
        {
            int capacity = 2000;
            StringBuilder builder = new StringBuilder(capacity);

            IntPtr ptr = OpenProcess(ProcessAccessFlags.QueryLimitedInformation, false, p.Id);

            if (!QueryFullProcessImageName(ptr, 0, builder, ref capacity))
            {
                return String.Empty;
            }

            return builder.ToString();
        }
    }

    //classes to parse json data
    public class SummonerInfo
    {
        public long summonerId;
    }

    public class MyTeam
    {
        public long summonerId;
        public int championId;
    }

    public class ChampionHoverInfo
    {
        public List<MyTeam> myTeam;
    }

    public class ChampionInfo
    {
        public int id;
        public string name;
    }

    public class RunePageInfo
    {
        public int id;
        public string name;
        public bool isEditable;
    }

    public class ItemSets
    {
        public long accountId;
        public List<ItemSet> itemSets;
    }

    public class ResponseBody
    {
        public int httpStatus;
    }

    public static class Utility
    {
        //dictionary of the images of each role
        public static Dictionary<string, string> imagePaths = new Dictionary<string, string>()
        {
            {"top",  "https://ultimate-bravery.net/images/roles/top_icon.png"},
            {"jungle",  "https://ultimate-bravery.net/images/roles/jungle_icon.png"},
            {"mid",  "https://ultimate-bravery.net/images/roles/mid_icon.png"},
            {"adc", "https://ultimate-bravery.net/images/roles/bot_icon.png"},
            {"support", "https://ultimate-bravery.net/images/roles/support_icon.png"}
        };
    }
}



